{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Card","card","feedback","index","onClick","className","GuessCount","guesses","App","state","board","generateGameBoard","currentPair","stateOfCards","generateSateOfCards","matchedCardIndices","handleCardClick","current","matchedCard","length","setState","push","console","log","result","candidates","shuffle","pop","this","won","wonMessage","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yPASMA,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,SAAUC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,QAA1B,OACX,yBAAKC,UAAS,eAAUH,GAAYE,QAAS,kBAAMA,EAAQH,EAAME,KAC/D,0BAAME,UAAU,UACA,WAAbH,EAPe,SAOyBD,KAIzCK,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAmBA,EAAU,EAAK,yBAAKF,UAAU,WAAf,IAA2BE,EAA3B,YAAoD,yBAAKF,UAAU,WAAf,IAA2BE,EAA3B,WA4F1FC,E,2MAxFbC,MAAQ,CACNC,MAAO,EAAKC,oBACZC,YAAa,GACbL,QAAS,EACTM,aAAc,EAAKC,sBACnBC,mBAAoB,I,EAsBtBC,gBAAkB,SAACf,EAAME,GACvB,IAAIc,EAAU,EAAKR,MAAMG,YACrBM,EAAc,EAAKT,MAAMM,mBACzBN,EAAQ,EAAKA,MAAMI,aACvB,GAAqB,WAAjBJ,EAAMN,GAAV,CACA,GAAsC,IAAlC,EAAKM,MAAMG,YAAYO,OASzB,MAR0B,gBAAtBV,EAAMQ,EAAQ,MAChBR,EAAMQ,EAAQ,IAAM,SACpBR,EAAMQ,EAAQ,IAAM,eAEtB,EAAKG,SAAS,CACZR,YAAa,GACbC,aAAcJ,IAIlBA,EAAMN,GAAS,UACf,EAAKiB,SAAS,CAAEP,aAAcJ,IAC1BQ,EAAQE,OAAS,IACnBF,EAAQI,KAAKpB,EAAME,GACnB,EAAKiB,SAAS,CAAER,YAAaK,KAEO,IAAlC,EAAKR,MAAMG,YAAYO,SACrB,EAAKV,MAAMG,YAAY,KAAO,EAAKH,MAAMG,YAAY,IACvDM,EAAYG,KAAKJ,EAAQ,GAAIA,EAAQ,IACrCR,EAAMQ,EAAQ,IAAM,cACpBR,EAAMQ,EAAQ,IAAM,cACpB,EAAKG,SAAS,CAAEL,mBAAoBG,MAGpCT,EAAMQ,EAAQ,IAAM,iBACpBR,EAAMQ,EAAQ,IAAM,kBAEtB,EAAKG,SAAS,CAAEP,aAAcJ,IAC9B,EAAKW,SAAS,CAAEb,QAAS,EAAKE,MAAMF,QAAU,KAEhDe,QAAQC,IAAItB,EAAM,EAAKQ,S,qFArDvB,IADA,IAAIe,EAAS,GACNA,EAAOL,OAxBL,IAyBPK,EAAOH,KAAK,UAEd,OAAOG,I,0CAMP,IAFA,IAAMA,EAAS,GACTC,EAAaC,IAlCT,sQAmCHF,EAAOL,OAjCL,IAiCoB,CAC3B,IAAMlB,EAAOwB,EAAWE,MACxBH,EAAOH,KAAKpB,EAAMA,GAEpB,OAAOyB,IAAQF,K,+BA2CP,IAAD,SACsDI,KAAKnB,MAA1DC,EADD,EACCA,MAAOG,EADR,EACQA,aAAcN,EADtB,EACsBA,QACvBsB,EAFC,EAC+Bd,mBACPI,SAAWT,EAAMS,OAC1CW,EAAa,cAAgBvB,EAAU,SAC7C,OACE,yBAAKF,UAAU,UACb,kBAAC,EAAD,CAAYE,QAASA,IACpBG,EAAMqB,KAAI,SAAC9B,EAAME,GAAP,OACT,kBAAC,EAAD,CACEF,KAAMA,EACNC,SAAUW,EAAaV,GACvBA,MAAOA,EACP6B,IAAK7B,EACLC,QAAS,EAAKY,qBAGjBa,GAAOC,O,GAnFEG,aCPEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,a","file":"static/js/main.2288f989.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css';\nimport shuffle from 'lodash.shuffle'\n\nconst CARDS = '🚂🚃🚡🛰️🚀🛸🚕🚖🚗🚘🚛🚜🚲🛴🛵🚍🚎🚐🚑🚒✈️'\nconst HIDDEN_SYMBOL = '❓'\nconst SIZE = 42\n\n\nconst Card = ({ card, feedback, index, onClick }) => (\n  <div className={`card ${feedback}`} onClick={() => onClick(card, index)}>\n    <span className=\"symbol\">\n      {feedback === 'hidden' ? HIDDEN_SYMBOL : card}\n    </span>\n  </div>\n)\nconst GuessCount = ({ guesses }) => ((guesses > 1) ? <div className=\"guesses\"> {guesses} guesses</div> : <div className=\"guesses\"> {guesses} guess</div>)\n\n\nclass App extends Component {\n  state = {\n    board: this.generateGameBoard(),\n    currentPair: [],\n    guesses: 0,\n    stateOfCards: this.generateSateOfCards(),\n    matchedCardIndices: [],\n  }\n\n  generateSateOfCards() {\n    let result = [];\n    while (result.length < SIZE) {\n      result.push(\"hidden\")\n    }\n    return result\n  }\n\n  generateGameBoard() {\n    const result = []\n    const candidates = shuffle(CARDS)\n    while (result.length < SIZE) {\n      const card = candidates.pop()\n      result.push(card, card)\n    }\n    return shuffle(result)\n  }\n\n  // Arrow fx for binding\n  handleCardClick = (card, index) => {\n    let current = this.state.currentPair;\n    let matchedCard = this.state.matchedCardIndices;\n    let state = this.state.stateOfCards;\n    if (state[index] !== \"hidden\") { return }\n    if (this.state.currentPair.length === 4) {\n      if (state[current[1]] !== \"justMatched\") {\n        state[current[1]] = \"hidden\";\n        state[current[3]] = \"hidden\";\n      }\n      this.setState({\n        currentPair: [],\n        stateOfCards: state,\n      });\n      return;\n    }\n    state[index] = \"visible\";\n    this.setState({ stateOfCards: state })\n    if (current.length < 4) {\n      current.push(card, index);\n      this.setState({ currentPair: current });\n    }\n    if (this.state.currentPair.length === 4) {\n      if (this.state.currentPair[0] === this.state.currentPair[2]) {\n        matchedCard.push(current[1], current[3]);\n        state[current[1]] = \"justMatched\";\n        state[current[3]] = \"justMatched\";\n        this.setState({ matchedCardIndices: matchedCard })\n      }\n      else {\n        state[current[1]] = \"justMismatched\";\n        state[current[3]] = \"justMismatched\";\n      }\n      this.setState({ stateOfCards: state });\n      this.setState({ guesses: this.state.guesses + 1 });\n    }\n    console.log(card, this.state)\n  }\n\n  render() {\n    const { board, stateOfCards, guesses, matchedCardIndices } = this.state\n    const won = matchedCardIndices.length === board.length\n    const wonMessage = \"you won in \" + guesses + \" tries\"\n    return (\n      <div className=\"memory\">\n        <GuessCount guesses={guesses} />\n        {board.map((card, index) => (\n          <Card\n            card={card}\n            feedback={stateOfCards[index]}\n            index={index}\n            key={index}\n            onClick={this.handleCardClick}\n          />\n        ))}\n        {won && wonMessage}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}